// LetRents Property Management System - Improved Prisma Schema
// This schema fixes all the issues that blocked the Node.js implementation

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserRole {
  super_admin
  agency_admin
  landlord
  agent
  caretaker
  tenant

  @@map("user_role")
}

enum UserStatus {
  active
  inactive
  suspended
  pending
  pending_setup

  @@map("user_status")
}

enum PropertyType {
  residential
  commercial
  mixed_use
  industrial
  land

  @@map("property_type")
}

enum PropertyStatus {
  active
  inactive
  under_construction
  maintenance

  @@map("property_status")
}

enum UnitType {
  studio
  one_bedroom
  two_bedroom
  three_bedroom
  four_bedroom
  five_plus_bedroom
  commercial_space
  office
  warehouse
  parking

  @@map("unit_type")
}

enum UnitStatus {
  vacant
  occupied
  reserved
  under_repair
  maintenance

  @@map("unit_status")
}

enum UnitCondition {
  excellent
  good
  fair
  poor
  needs_renovation

  @@map("unit_condition")
}

enum FurnishingType {
  unfurnished
  semi_furnished
  fully_furnished

  @@map("furnishing_type")
}

enum UtilityBillingType {
  prepaid
  postpaid
  included

  @@map("utility_billing_type")
}

enum OwnershipType {
  individual
  company
  partnership
  trust

  @@map("ownership_type")
}

enum MessageStatus {
  draft
  sent
  delivered
  read
  failed

  @@map("message_status")
}

enum NotificationStatus {
  unread
  read
  archived

  @@map("notification_status")
}

enum PriorityLevel {
  low
  medium
  high
  urgent

  @@map("priority_level")
}

enum MaintenanceStatus {
  pending
  in_progress
  completed
  cancelled

  @@map("maintenance_status")
}

enum InvoiceStatus {
  draft
  sent
  paid
  overdue
  cancelled

  @@map("invoice_status")
}

// ============================================================================
// CORE MODELS
// ============================================================================

model Company {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String   @db.VarChar(255)
  email        String?  @unique @db.VarChar(255)
  phone_number String?  @db.VarChar(20)
  address      String?
  website      String?  @db.VarChar(255)
  logo_url     String?  @db.VarChar(500)
  settings     Json     @default("{}")
  status       String   @default("active") @db.VarChar(20)
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  agencies              Agency[]
  users                 User[]
  properties            Property[]
  units                 Unit[]
  conversations         Conversation[]
  messages              Message[]
  notifications         Notification[]
  maintenance_requests  MaintenanceRequest[]
  invoices              Invoice[]
  message_templates     MessageTemplate[]

  @@map("companies")
}

model Agency {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id     String   @db.Uuid
  name           String   @db.VarChar(255)
  email          String   @unique @db.VarChar(255)
  phone_number   String?  @db.VarChar(20)
  address        String?
  license_number String?  @db.VarChar(100)
  status         String   @default("active") @db.VarChar(20)
  created_by     String?  @db.Uuid
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  updated_at     DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  company    Company @relation(fields: [company_id], references: [id], onDelete: Cascade)
  users      User[]
  properties Property[]

  @@map("agencies")
}

model User {
  id                        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id                String?    @db.Uuid
  email                     String?    @unique @db.VarChar(255)
  phone_number              String?    @db.VarChar(20)
  password_hash             String?    @db.VarChar(255)
  first_name                String     @db.VarChar(100)
  last_name                 String     @db.VarChar(100)
  role                      UserRole
  status                    UserStatus @default(pending)
  agency_id                 String?    @db.Uuid
  landlord_id               String?    @db.Uuid
  created_by                String?    @db.Uuid

  // Authentication fields
  email_verified            Boolean    @default(false)
  phone_verified            Boolean    @default(false)
  last_login_at             DateTime?  @db.Timestamptz(6)
  password_changed_at       DateTime   @default(now()) @db.Timestamptz(6)
  failed_login_attempts     Int        @default(0)
  account_locked_until      DateTime?  @db.Timestamptz(6)

  // Profile fields
  avatar_url                String?    @db.VarChar(500)
  date_of_birth             DateTime?  @db.Date
  gender                    String?    @db.VarChar(10)
  nationality               String?    @db.VarChar(100)
  id_number                 String?    @db.VarChar(50)

  // Preferences
  language                  String     @default("en") @db.VarChar(10)
  timezone                  String     @default("UTC") @db.VarChar(50)
  notification_preferences  Json       @default("{}")

  // Invitation fields
  invitation_status         String     @default("pending") @db.VarChar(20)
  invitation_sent_at        DateTime?  @db.Timestamptz(6)
  invitation_accepted_at    DateTime?  @db.Timestamptz(6)
  invitation_token          String?    @db.VarChar(255)

  // Audit fields
  created_at                DateTime   @default(now()) @db.Timestamptz(6)
  updated_at                DateTime   @default(now()) @db.Timestamptz(6)

  // Relations
  company                   Company?   @relation(fields: [company_id], references: [id], onDelete: Cascade)
  agency                    Agency?    @relation(fields: [agency_id], references: [id], onDelete: SetNull)
  landlord                  User?      @relation("UserLandlord", fields: [landlord_id], references: [id], onDelete: SetNull)
  tenants                   User[]     @relation("UserLandlord")
  creator                   User?      @relation("UserCreator", fields: [created_by], references: [id], onDelete: SetNull)
  created_users             User[]     @relation("UserCreator")

  // Auth relations
  refresh_tokens            RefreshToken[]
  password_reset_tokens     PasswordResetToken[]
  email_verification_tokens EmailVerificationToken[]
  user_sessions             UserSession[]

  // Property relations
  owned_properties          Property[] @relation("PropertyOwner")
  created_properties        Property[] @relation("PropertyCreator")
  assigned_units            Unit[]     @relation("UnitTenant")
  created_units             Unit[]     @relation("UnitCreator")

  // Communication relations
  created_conversations     Conversation[] @relation("ConversationCreator")
  conversation_participants ConversationParticipant[]
  sent_messages             Message[]  @relation("MessageSender")
  received_messages         MessageRecipient[]
  created_templates         MessageTemplate[]

  // Notification relations
  sent_notifications        Notification[] @relation("NotificationSender")
  received_notifications    Notification[] @relation("NotificationRecipient")
  notification_preferences  NotificationPreference[]

  // Maintenance relations
  requested_maintenance     MaintenanceRequest[] @relation("MaintenanceRequester")
  assigned_maintenance      MaintenanceRequest[] @relation("MaintenanceAssignee")

  // Invoice relations
  issued_invoices           Invoice[]  @relation("InvoiceIssuer")
  received_invoices         Invoice[]  @relation("InvoiceRecipient")

  // Tenant profile
  tenant_profile            TenantProfile?

  @@map("users")
}

// ============================================================================
// AUTHENTICATION MODELS
// ============================================================================

model RefreshToken {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String    @db.Uuid
  token_hash   String    @unique @db.VarChar(255)
  device_info  Json?
  ip_address   String?   @db.Inet
  user_agent   String?
  expires_at   DateTime  @db.Timestamptz(6)
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  is_revoked   Boolean   @default(false)
  revoked_at   DateTime? @db.Timestamptz(6)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model PasswordResetToken {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  token_hash String    @unique @db.VarChar(255)
  expires_at DateTime  @db.Timestamptz(6)
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  is_used    Boolean   @default(false)
  used_at    DateTime? @db.Timestamptz(6)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  token_hash String    @unique @db.VarChar(255)
  email      String    @db.VarChar(255)
  expires_at DateTime  @db.Timestamptz(6)
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  is_used    Boolean   @default(false)
  used_at    DateTime? @db.Timestamptz(6)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model UserSession {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String    @db.Uuid
  session_token String    @unique @db.VarChar(255)
  device_info   Json?
  ip_address    String?   @db.Inet
  user_agent    String?
  last_activity DateTime  @default(now()) @db.Timestamptz(6)
  expires_at    DateTime  @db.Timestamptz(6)
  created_at    DateTime  @default(now()) @db.Timestamptz(6)
  is_active     Boolean   @default(true)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// ============================================================================
// PROPERTY MODELS
// ============================================================================

model Property {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id        String?        @db.Uuid
  name              String         @db.VarChar(255)
  property_type     PropertyType   // FIXED: Consistent naming
  description       String?

  // Location details (FIXED: Consistent field names)
  address           String         @db.VarChar(255) // FIXED: Was 'street'
  city              String         @db.VarChar(100)
  state             String         @db.VarChar(100) // FIXED: Was 'region'
  country           String         @default("Kenya") @db.VarChar(100)
  postal_code       String?        @db.VarChar(20)
  latitude          Decimal?       @db.Decimal(10, 8)
  longitude         Decimal?       @db.Decimal(11, 8)

  // Ownership details
  ownership_type    OwnershipType  @default(individual)
  owner_id          String         @db.Uuid
  agency_id         String?        @db.Uuid

  // Property structure
  total_units       Int            @default(1) // FIXED: Was 'number_of_units'
  number_of_blocks  Int?
  number_of_floors  Int?
  year_built        Int?
  last_renovation   DateTime?      @db.Timestamptz(6)

  // Size and area (FIXED: Added missing fields)
  lot_size          Decimal?       @db.Decimal(12, 2)
  building_size     Decimal?       @db.Decimal(12, 2)

  // Financial details
  service_charge_rate Decimal?     @db.Decimal(10, 2)
  service_charge_type String?      @db.VarChar(20)

  // Property features (FIXED: Added missing fields)
  amenities         Json           @default("[]")
  parking_spaces    Int            @default(0)
  laundry_facilities String?       @db.VarChar(100)
  pet_policy        String?
  smoking_policy    String?        @db.VarChar(50)
  lease_terms       String?
  utilities_included Json          @default("[]")

  // Management
  access_control    String?        @db.VarChar(100)
  maintenance_schedule String?     @db.VarChar(100)

  // Status and tracking
  status            PropertyStatus @default(active)

  // Document and media
  documents         Json           @default("[]")
  images            Json           @default("[]")

  // Audit fields
  created_by        String         @db.Uuid
  created_at        DateTime       @default(now()) @db.Timestamptz(6)
  updated_at        DateTime       @default(now()) @db.Timestamptz(6)

  // Relations
  company           Company?       @relation(fields: [company_id], references: [id], onDelete: Cascade)
  owner             User           @relation("PropertyOwner", fields: [owner_id], references: [id], onDelete: Restrict)
  agency            Agency?        @relation(fields: [agency_id], references: [id], onDelete: SetNull)
  creator           User           @relation("PropertyCreator", fields: [created_by], references: [id], onDelete: Restrict)
  units             Unit[]
  maintenance_requests MaintenanceRequest[]
  invoices          Invoice[]
  conversations     Conversation[]

  @@map("properties")
}

model Unit {
  id                    String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id            String?           @db.Uuid
  property_id           String            @db.Uuid
  unit_number           String            @db.VarChar(50)
  unit_type             UnitType
  block_number          String?           @db.VarChar(20)
  floor_number          Int?

  // Size details
  size_square_feet      Decimal?          @db.Decimal(10, 2)
  size_square_meters    Decimal?          @db.Decimal(10, 2)
  number_of_bedrooms    Int?
  number_of_bathrooms   Int?

  // Features
  has_ensuite           Boolean           @default(false)
  has_balcony           Boolean           @default(false)
  has_parking           Boolean           @default(false)
  parking_spaces        Int               @default(0)

  // Financial details
  rent_amount           Decimal           @db.Decimal(12, 2)
  currency              String            @default("KES") @db.VarChar(3)
  deposit_amount        Decimal           @db.Decimal(12, 2)
  deposit_months        Int               @default(1)

  // Status and condition
  status                UnitStatus        @default(vacant)
  condition             UnitCondition     @default(good)
  furnishing_type       FurnishingType    @default(unfurnished)

  // Utilities
  water_meter_number    String?           @db.VarChar(50)
  electric_meter_number String?           @db.VarChar(50)
  utility_billing_type  UtilityBillingType @default(postpaid)

  // Features and amenities
  in_unit_amenities     Json              @default("[]")
  appliances            Json              @default("[]")

  // Current tenant
  current_tenant_id     String?           @db.Uuid
  lease_start_date      DateTime?         @db.Date
  lease_end_date        DateTime?         @db.Date
  lease_type            String?           @db.VarChar(20)

  // Documents and media
  documents             Json              @default("[]")
  images                Json              @default("[]")

  // Valuation
  estimated_value       Decimal?          @db.Decimal(15, 2)
  market_rent_estimate  Decimal?          @db.Decimal(12, 2)
  last_valuation_date   DateTime?         @db.Date

  // Audit fields
  created_by            String            @db.Uuid
  created_at            DateTime          @default(now()) @db.Timestamptz(6)
  updated_at            DateTime          @default(now()) @db.Timestamptz(6)

  // Relations
  company               Company?          @relation(fields: [company_id], references: [id], onDelete: Cascade)
  property              Property          @relation(fields: [property_id], references: [id], onDelete: Cascade)
  current_tenant        User?             @relation("UnitTenant", fields: [current_tenant_id], references: [id], onDelete: SetNull)
  creator               User              @relation("UnitCreator", fields: [created_by], references: [id], onDelete: Restrict)
  maintenance_requests  MaintenanceRequest[]
  invoices              Invoice[]

  @@unique([property_id, unit_number])
  @@map("units")
}

// ============================================================================
// COMMUNICATIONS MODELS (FIXED)
// ============================================================================

model Conversation {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id   String?  @db.Uuid
  subject      String   @db.VarChar(255)
  type         String   @default("direct") @db.VarChar(20)
  created_by   String   @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  company      Company? @relation(fields: [company_id], references: [id], onDelete: Cascade)
  creator      User     @relation("ConversationCreator", fields: [created_by], references: [id], onDelete: Restrict)
  participants ConversationParticipant[]
  messages     Message[]
  property     Property? @relation(fields: [company_id], references: [id])

  @@map("conversations")
}

model ConversationParticipant {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversation_id String    @db.Uuid
  user_id         String    @db.Uuid
  joined_at       DateTime  @default(now()) @db.Timestamptz(6)
  left_at         DateTime? @db.Timestamptz(6)
  role            String    @default("participant") @db.VarChar(20)

  // Relations
  conversation    Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([conversation_id, user_id])
  @@map("conversation_participants")
}

model Message {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id        String?        @db.Uuid
  conversation_id   String?        @db.Uuid
  sender_id         String         @db.Uuid

  // Message content
  subject           String?        @db.VarChar(255)
  content           String
  message_type      String         @default("text") @db.VarChar(20)

  // Status and priority
  priority          PriorityLevel  @default(medium)
  status            MessageStatus  @default(draft)

  // Delivery tracking
  sent_at           DateTime?      @db.Timestamptz(6)
  scheduled_for     DateTime?      @db.Timestamptz(6)

  // Threading
  parent_message_id String?        @db.Uuid
  thread_id         String?        @db.Uuid

  // Template and AI
  template_id       String?        @db.Uuid
  is_ai_generated   Boolean        @default(false)
  ai_confidence     Decimal?       @db.Decimal(3, 2)

  // Metadata
  attachments       Json           @default("[]")
  metadata          Json           @default("{}")

  // Audit fields
  created_at        DateTime       @default(now()) @db.Timestamptz(6)
  updated_at        DateTime       @default(now()) @db.Timestamptz(6)

  // Relations
  company           Company?       @relation(fields: [company_id], references: [id], onDelete: Cascade)
  conversation      Conversation?  @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  sender            User           @relation("MessageSender", fields: [sender_id], references: [id], onDelete: Cascade)
  parent_message    Message?       @relation("MessageThread", fields: [parent_message_id], references: [id], onDelete: Cascade)
  child_messages    Message[]      @relation("MessageThread")
  recipients        MessageRecipient[]

  @@map("messages")
}

model MessageRecipient {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message_id   String    @db.Uuid
  recipient_id String    @db.Uuid

  // Read status (FIXED: Individual read tracking per recipient)
  is_read      Boolean   @default(false)
  read_at      DateTime? @db.Timestamptz(6)
  delivered_at DateTime? @db.Timestamptz(6)

  // Recipient-specific settings
  is_starred   Boolean   @default(false)
  is_archived  Boolean   @default(false)

  created_at   DateTime  @default(now()) @db.Timestamptz(6)

  // Relations
  message      Message   @relation(fields: [message_id], references: [id], onDelete: Cascade)
  recipient    User      @relation(fields: [recipient_id], references: [id], onDelete: Cascade)

  @@unique([message_id, recipient_id])
  @@map("message_recipients")
}

model MessageTemplate {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id   String?  @db.Uuid
  name         String   @db.VarChar(100)
  subject      String?  @db.VarChar(255)
  content      String
  template_type String   @db.VarChar(50)
  variables    Json     @default("[]")
  is_global    Boolean  @default(false)
  created_by   String   @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  company      Company? @relation(fields: [company_id], references: [id], onDelete: Cascade)
  creator      User     @relation(fields: [created_by], references: [id], onDelete: Restrict)

  @@map("message_templates")
}

// ============================================================================
// NOTIFICATIONS MODELS (FIXED)
// ============================================================================

model Notification {
  id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id           String?            @db.Uuid
  sender_id            String?            @db.Uuid
  recipient_id         String             @db.Uuid

  // Notification content
  title                String             @db.VarChar(255)
  message              String
  notification_type    String             @db.VarChar(50)
  category             String?            @db.VarChar(50)
  priority             PriorityLevel      @default(medium)

  // Status and interaction (FIXED: Proper read status)
  status               NotificationStatus @default(unread)
  is_read              Boolean            @default(false)
  read_at              DateTime?          @db.Timestamptz(6)

  // Action and navigation
  action_required      Boolean            @default(false)
  action_url           String?            @db.VarChar(500)
  action_data          Json?

  // Related entity
  related_entity_type  String?            @db.VarChar(50)
  related_entity_id    String?            @db.Uuid

  // Delivery channels
  channels             Json               @default("[\"app\"]")

  // Metadata
  metadata             Json               @default("{}")

  // Audit fields
  created_at           DateTime           @default(now()) @db.Timestamptz(6)
  updated_at           DateTime           @default(now()) @db.Timestamptz(6)

  // Relations
  company              Company?           @relation(fields: [company_id], references: [id], onDelete: Cascade)
  sender               User?              @relation("NotificationSender", fields: [sender_id], references: [id], onDelete: SetNull)
  recipient            User               @relation("NotificationRecipient", fields: [recipient_id], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model NotificationPreference {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String   @db.Uuid
  notification_type String   @db.VarChar(50)
  channels          Json     @default("[\"app\"]")
  is_enabled        Boolean  @default(true)
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  updated_at        DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  user              User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, notification_type])
  @@map("notification_preferences")
}

// ============================================================================
// MAINTENANCE MODELS
// ============================================================================

model MaintenanceRequest {
  id             String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id     String?           @db.Uuid
  property_id    String            @db.Uuid
  unit_id        String?           @db.Uuid

  // Request details
  title          String            @db.VarChar(255)
  description    String
  category       String            @db.VarChar(50)
  priority       PriorityLevel     @default(medium)
  status         MaintenanceStatus @default(pending)

  // People involved
  requested_by   String            @db.Uuid
  assigned_to    String?           @db.Uuid

  // Scheduling
  requested_date DateTime          @default(now()) @db.Date
  scheduled_date DateTime?         @db.Date
  completed_date DateTime?         @db.Date

  // Cost tracking
  estimated_cost Decimal?          @db.Decimal(12, 2)
  actual_cost    Decimal?          @db.Decimal(12, 2)

  // Media and documentation
  images         Json              @default("[]")
  documents      Json              @default("[]")

  // Notes and updates
  notes          String?
  internal_notes String?

  // Audit fields
  created_at     DateTime          @default(now()) @db.Timestamptz(6)
  updated_at     DateTime          @default(now()) @db.Timestamptz(6)

  // Relations
  company        Company?          @relation(fields: [company_id], references: [id], onDelete: Cascade)
  property       Property          @relation(fields: [property_id], references: [id], onDelete: Cascade)
  unit           Unit?             @relation(fields: [unit_id], references: [id], onDelete: Cascade)
  requester      User              @relation("MaintenanceRequester", fields: [requested_by], references: [id], onDelete: Restrict)
  assignee       User?             @relation("MaintenanceAssignee", fields: [assigned_to], references: [id], onDelete: SetNull)

  @@map("maintenance_requests")
}

// ============================================================================
// FINANCIAL MODELS
// ============================================================================

model Invoice {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id        String?       @db.Uuid
  invoice_number    String        @unique @db.VarChar(50)

  // Invoice details
  title             String        @db.VarChar(255)
  description       String?
  invoice_type      String        @db.VarChar(50)

  // Parties
  issued_by         String        @db.Uuid
  issued_to         String        @db.Uuid

  // Related entities
  property_id       String?       @db.Uuid
  unit_id           String?       @db.Uuid

  // Financial details
  subtotal          Decimal       @default(0) @db.Decimal(12, 2)
  tax_amount        Decimal       @default(0) @db.Decimal(12, 2)
  discount_amount   Decimal       @default(0) @db.Decimal(12, 2)
  total_amount      Decimal       @db.Decimal(12, 2)
  currency          String        @default("KES") @db.VarChar(3)

  // Dates
  issue_date        DateTime      @default(now()) @db.Date
  due_date          DateTime      @db.Date
  paid_date         DateTime?     @db.Date

  // Status
  status            InvoiceStatus @default(draft)

  // Payment tracking
  payment_method    String?       @db.VarChar(50)
  payment_reference String?       @db.VarChar(100)

  // Metadata
  metadata          Json          @default("{}")

  // Audit fields
  created_at        DateTime      @default(now()) @db.Timestamptz(6)
  updated_at        DateTime      @default(now()) @db.Timestamptz(6)

  // Relations
  company           Company?      @relation(fields: [company_id], references: [id], onDelete: Cascade)
  issuer            User          @relation("InvoiceIssuer", fields: [issued_by], references: [id], onDelete: Restrict)
  recipient         User          @relation("InvoiceRecipient", fields: [issued_to], references: [id], onDelete: Restrict)
  property          Property?     @relation(fields: [property_id], references: [id], onDelete: SetNull)
  unit              Unit?         @relation(fields: [unit_id], references: [id], onDelete: SetNull)
  line_items        InvoiceLineItem[]

  @@map("invoices")
}

model InvoiceLineItem {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice_id  String  @db.Uuid

  // Item details
  description String  @db.VarChar(255)
  quantity    Decimal @default(1) @db.Decimal(10, 2)
  unit_price  Decimal @db.Decimal(12, 2)
  total_price Decimal @db.Decimal(12, 2)

  // Metadata
  metadata    Json    @default("{}")

  created_at  DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  invoice     Invoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)

  @@map("invoice_line_items")
}

// ============================================================================
// TENANT MODELS
// ============================================================================

model TenantProfile {
  id                              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                         String    @unique @db.Uuid

  // Personal details
  id_number                       String?   @db.VarChar(50)
  nationality                     String?   @default("Kenyan") @db.VarChar(100)

  // Lease details
  move_in_date                    DateTime? @db.Date
  lease_type                      String?   @default("fixed_term") @db.VarChar(50)
  lease_start_date                DateTime? @db.Date
  lease_end_date                  DateTime? @db.Date

  // Financial details
  rent_amount                     Decimal?  @db.Decimal(10, 2)
  deposit_amount                  Decimal?  @db.Decimal(10, 2)
  payment_frequency               String?   @default("monthly") @db.VarChar(20)
  payment_day                     Int?      @default(1)

  // Emergency contact
  emergency_contact_name          String?   @db.VarChar(100)
  emergency_contact_phone         String?   @db.VarChar(20)
  emergency_contact_relationship  String?   @db.VarChar(50)

  // Preferences
  preferred_communication_method  String?   @default("email") @db.VarChar(20)

  created_at                      DateTime  @default(now()) @db.Timestamptz(6)
  updated_at                      DateTime  @default(now()) @db.Timestamptz(6)

  // Relations
  user                            User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("tenant_profiles")
}
