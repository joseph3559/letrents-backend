generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model agencies {
  id                               String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                             String               @db.VarChar(255)
  email                            String               @unique @db.VarChar(255)
  phone_number                     String?              @db.VarChar(20)
  address                          String?
  status                           String               @default("active") @db.VarChar(20)
  created_by                       String               @db.Uuid
  created_at                       DateTime?            @default(now()) @db.Timestamp(6)
  updated_at                       DateTime?            @default(now()) @db.Timestamp(6)
  users_agencies_created_byTousers users                @relation("agencies_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_agencies_created_by")
  agency_performance               agency_performance[]
  api_keys                         api_keys[]
  invoices                         invoices[]
  payments                         payments[]
  properties                       properties[]
  subscriptions                    subscriptions[]
  users_users_agency_idToagencies  users[]              @relation("users_agency_idToagencies")

  @@index([email], map: "idx_agencies_email")
  @@index([status], map: "idx_agencies_status")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model agency_applications {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_name   String    @db.VarChar(255)
  contact_email  String    @db.VarChar(255)
  contact_phone  String    @db.VarChar(20)
  contact_person String    @db.VarChar(255)
  business_type  String    @db.VarChar(100)
  address        String
  city           String    @db.VarChar(100)
  country        String    @db.VarChar(100)
  tax_id         String?   @db.VarChar(50)
  website        String?   @db.VarChar(255)
  description    String
  documents      Json?     @default("[]")
  status         String    @default("pending") @db.VarChar(50)
  review_notes   String?
  reviewed_by    String?   @db.Uuid
  reviewed_at    DateTime? @db.Timestamp(6)
  approved_at    DateTime? @db.Timestamp(6)
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  users          users?    @relation(fields: [reviewed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([contact_email], map: "idx_agency_applications_contact_email")
  @@index([status], map: "idx_agency_applications_status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model agency_performance {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  agency_id        String    @db.Uuid
  agency_name      String    @db.VarChar(255)
  health_score     Decimal   @default(0) @db.Decimal(5, 2)
  revenue          Decimal   @default(0) @db.Decimal(15, 2)
  occupancy_rate   Decimal   @default(0) @db.Decimal(5, 2)
  complaint_rate   Decimal   @default(0) @db.Decimal(5, 2)
  total_properties Int       @default(0)
  active_tenants   Int       @default(0)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  agencies         agencies  @relation(fields: [agency_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([agency_id], map: "idx_agency_performance_agency_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model api_keys {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String    @db.VarChar(100)
  key          String    @unique @db.VarChar(255)
  agency_id    String?   @db.Uuid
  permissions  Json      @default("[]")
  is_active    Boolean   @default(true)
  last_used_at DateTime? @db.Timestamp(6)
  expires_at   DateTime? @db.Timestamp(6)
  created_by   String    @db.Uuid
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  agencies     agencies? @relation(fields: [agency_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users        users     @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([agency_id], map: "idx_api_keys_agency_id")
  @@index([is_active], map: "idx_api_keys_is_active")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model audit_logs {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String?   @db.Uuid
  action      String    @db.VarChar(100)
  resource    String    @db.VarChar(100)
  resource_id String?   @db.VarChar(255)
  changes     Json?
  metadata    Json?     @default("{}")
  ip_address  String?   @db.Inet
  user_agent  String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  users       users?    @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([action], map: "idx_audit_logs_action")
  @@index([created_at], map: "idx_audit_logs_created_at")
  @@index([user_id], map: "idx_audit_logs_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model broadcast_messages {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title            String    @db.VarChar(255)
  message          String
  type             String    @db.VarChar(50)
  target_audience  String    @db.VarChar(50)
  target_filters   Json?
  scheduled_for    DateTime? @db.Timestamp(6)
  sent_at          DateTime? @db.Timestamp(6)
  status           String    @default("draft") @db.VarChar(50)
  recipients_count Int?      @default(0)
  delivered_count  Int?      @default(0)
  opened_count     Int?      @default(0)
  created_by       String    @db.Uuid
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  users            users     @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_by], map: "idx_broadcast_messages_created_by")
  @@index([status], map: "idx_broadcast_messages_status")
}

model caretakers {
  id                      String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                 String?               @db.Uuid
  specialization          String?               @db.VarChar(255)
  experience_years        Int?                  @default(0)
  salary                  Decimal?              @db.Decimal(10, 2)
  salary_currency         String?               @default("KES") @db.VarChar(10)
  employment_date         DateTime?             @db.Date
  address                 String?
  nationality             String?               @default("Kenyan") @db.VarChar(100)
  working_hours           String?               @db.VarChar(255)
  off_days                String[]
  skills                  String[]
  languages               String[]
  emergency_contact_name  String?               @db.VarChar(255)
  emergency_contact_phone String?               @db.VarChar(20)
  emergency_relationship  String?               @db.VarChar(100)
  is_active               Boolean?              @default(true)
  created_at              DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at              DateTime?             @default(now()) @db.Timestamptz(6)
  company_id              String?               @db.Uuid
  id_number               String?               @db.VarChar(50)
  position                String?               @db.VarChar(100)
  monthly_salary          Decimal?              @db.Decimal(10, 2)
  residential_address     String?
  property_id             String?               @db.Uuid
  availability            String?               @default("available") @db.VarChar(20)
  rating                  Decimal?              @default(4.5) @db.Decimal(3, 2)
  properties_managed      Int?                  @default(0)
  staff_number            String?               @unique @db.VarChar(20)
  users                   users?                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  property_caretakers     property_caretakers[]

  @@index([is_active], map: "idx_caretakers_is_active")
  @@index([user_id], map: "idx_caretakers_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model companies {
  id                  String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String       @unique(map: "unique_company_name") @db.VarChar(255)
  business_type       String?      @default("property_management") @db.VarChar(100)
  registration_number String?      @db.VarChar(100)
  tax_id              String?      @db.VarChar(100)
  email               String?      @db.VarChar(255)
  phone_number        String?      @db.VarChar(20)
  website             String?      @db.VarChar(255)
  street              String?      @db.VarChar(255)
  city                String?      @db.VarChar(100)
  region              String?      @db.VarChar(100)
  country             String?      @default("Kenya") @db.VarChar(100)
  postal_code         String?      @db.VarChar(20)
  industry            String?      @default("real_estate") @db.VarChar(100)
  company_size        String?      @default("small") @db.VarChar(50)
  status              String?      @default("active") @db.VarChar(20)
  subscription_plan   String?      @default("starter") @db.VarChar(50)
  max_properties      Int?         @default(100)
  max_units           Int?         @default(1000)
  max_tenants         Int?         @default(1000)
  max_staff           Int?         @default(50)
  settings            Json?        @default("{}")
  created_by          String?      @db.Uuid
  created_at          DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?    @default(now()) @db.Timestamptz(6)
  properties          properties[]
  units               units[]
  users               users[]

  @@index([name], map: "idx_companies_name")
  @@index([status], map: "idx_companies_status")
  @@index([subscription_plan], map: "idx_companies_subscription_plan")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model conversations {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String      @db.VarChar(255)
  type            String      @db.VarChar(20)
  status          String      @default("active") @db.VarChar(20)
  priority        String      @default("medium") @db.VarChar(20)
  property_id     String?     @db.Uuid
  unit_id         String?     @db.Uuid
  tags            Json?       @default("[]")
  last_message    String?
  last_message_at DateTime?   @db.Timestamptz(6)
  created_by      String      @db.Uuid
  created_at      DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?   @default(now()) @db.Timestamptz(6)
  users           users       @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction)
  properties      properties? @relation(fields: [property_id], references: [id], onUpdate: NoAction)
  units           units?      @relation(fields: [unit_id], references: [id], onUpdate: NoAction)
  messages        messages[]
}

model email_verification_tokens {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  token_hash String    @unique @db.VarChar(255)
  email      String    @db.VarChar(255)
  expires_at DateTime  @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  is_used    Boolean?  @default(false)
  used_at    DateTime? @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model emergency_contacts {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id    String    @unique @db.Uuid
  name         String?   @db.VarChar(255)
  phone        String?   @db.VarChar(20)
  email        String?   @db.VarChar(255)
  relationship String?   @db.VarChar(100)
  address      String?
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  users        users     @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model invitations {
  id                                  String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                             String            @db.Uuid
  email                               String            @db.VarChar(255)
  role                                String            @db.VarChar(50)
  invite_token                        String            @unique @db.VarChar(255)
  token_hash                          String            @unique @db.VarChar(255)
  status                              invitation_status @default(invited)
  expires_at                          DateTime          @db.Timestamp(6)
  created_by                          String            @db.Uuid
  company_id                          String?           @db.Uuid
  property_id                         String?           @db.Uuid
  unit_id                             String?           @db.Uuid
  used                                Boolean?          @default(false)
  used_at                             DateTime?         @db.Timestamp(6)
  created_at                          DateTime?         @default(now()) @db.Timestamp(6)
  updated_at                          DateTime?         @default(now()) @db.Timestamp(6)
  users_invitations_created_byTousers users             @relation("invitations_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_invitations_user_idTousers    users             @relation("invitations_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, email], map: "invitations_unique_user_email")
  @@index([company_id], map: "idx_invitations_company_id")
  @@index([created_by], map: "idx_invitations_created_by")
  @@index([email], map: "idx_invitations_email")
  @@index([expires_at], map: "idx_invitations_expires_at")
  @@index([status], map: "idx_invitations_status")
  @@index([token_hash], map: "idx_invitations_token_hash")
  @@index([user_id], map: "idx_invitations_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model invoices {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subscription_id String        @db.Uuid
  agency_id       String        @db.Uuid
  invoice_number  String        @unique @db.VarChar(50)
  status          String        @default("pending") @db.VarChar(50)
  amount          Decimal       @db.Decimal(10, 2)
  tax_amount      Decimal?      @default(0) @db.Decimal(10, 2)
  total_amount    Decimal       @db.Decimal(10, 2)
  currency        String        @default("USD") @db.VarChar(3)
  due_date        DateTime      @db.Date
  paid_at         DateTime?     @db.Timestamp(6)
  created_at      DateTime?     @default(now()) @db.Timestamp(6)
  updated_at      DateTime?     @default(now()) @db.Timestamp(6)
  agencies        agencies      @relation(fields: [agency_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  subscriptions   subscriptions @relation(fields: [subscription_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payments        payments[]

  @@index([status], map: "idx_invoices_status")
  @@index([subscription_id], map: "idx_invoices_subscription_id")
}

model lease_templates {
  id                     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                   String    @db.VarChar(255)
  description            String?
  category               String    @default("residential") @db.VarChar(50)
  default_duration       Int       @default(12)
  default_rent_due_date  Int       @default(5)
  default_late_fee       Decimal   @default(0) @db.Decimal(12, 2)
  default_grace_period   Int       @default(5)
  default_renewal_option Boolean   @default(true)
  default_renewal_notice Int       @default(60)
  default_pet_policy     Json?     @default("{\"allowed\": false}")
  default_utilities      Json?     @default("[]")
  default_special_terms  Json?     @default("[]")
  template_content       String?
  is_active              Boolean   @default(true)
  created_by             String    @db.Uuid
  created_at             DateTime? @default(now()) @db.Timestamptz(6)
  updated_at             DateTime? @default(now()) @db.Timestamptz(6)
  users                  users     @relation(fields: [created_by], references: [id], onUpdate: NoAction)

  @@index([is_active], map: "idx_lease_templates_active")
  @@index([category], map: "idx_lease_templates_category")
  @@index([created_by], map: "idx_lease_templates_created_by")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model leases {
  id                              String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  property_id                     String     @db.Uuid
  unit_id                         String     @db.Uuid
  tenant_id                       String     @db.Uuid
  landlord_id                     String     @db.Uuid
  lease_number                    String     @unique @db.VarChar(50)
  status                          String     @default("active") @db.VarChar(20)
  start_date                      DateTime   @db.Date
  end_date                        DateTime   @db.Date
  duration                        Int        @default(12)
  rent_amount                     Decimal    @db.Decimal(12, 2)
  security_deposit                Decimal    @default(0) @db.Decimal(12, 2)
  currency                        String     @default("KES") @db.VarChar(3)
  rent_due_date                   Int        @default(5)
  created_by                      String     @db.Uuid
  created_at                      DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at                      DateTime?  @default(now()) @db.Timestamptz(6)
  users_leases_landlord_idTousers users      @relation("leases_landlord_idTousers", fields: [landlord_id], references: [id], onUpdate: NoAction)
  properties                      properties @relation(fields: [property_id], references: [id], onUpdate: NoAction)
  users_leases_tenant_idTousers   users      @relation("leases_tenant_idTousers", fields: [tenant_id], references: [id], onUpdate: NoAction)
  units                           units      @relation(fields: [unit_id], references: [id], onUpdate: NoAction)
}

model maintenance_requests {
  id             String    @id @db.VarChar(50)
  tenant_id      String    @db.Uuid
  title          String    @db.VarChar(255)
  description    String
  category       String?   @default("General") @db.VarChar(100)
  priority       String?   @default("medium") @db.VarChar(20)
  status         String?   @default("pending") @db.VarChar(50)
  estimated_cost Decimal?  @default(0) @db.Decimal(10, 2)
  actual_cost    Decimal?  @default(0) @db.Decimal(10, 2)
  preferred_time String?   @db.VarChar(255)
  reported_by    String?   @default("tenant") @db.VarChar(50)
  assigned_to    String?   @db.VarChar(255)
  paid_by        String?   @db.VarChar(50)
  payment_status String?   @default("pending") @db.VarChar(50)
  images         String[]
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model message_templates {
  id                 String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String     @db.VarChar(255)
  subject            String
  content            String
  category           String     @db.VarChar(50)
  usage_count        Int?       @default(0)
  variables          Json?      @default("[]")
  created_by         String     @db.Uuid
  created_at         DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?  @default(now()) @db.Timestamptz(6)
  is_system_template Boolean?   @default(false)
  is_active          Boolean?   @default(true)
  users              users      @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction)
  messages           messages[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model messages {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversation_id   String?            @db.Uuid
  type              String             @db.VarChar(20)
  subject           String
  content           String
  sender_id         String             @db.Uuid
  priority          String             @default("medium") @db.VarChar(20)
  status            String             @default("draft") @db.VarChar(20)
  sent_via          Json?              @default("[\"app\"]")
  tags              Json?              @default("[]")
  scheduled_for     DateTime?          @db.Timestamptz(6)
  sent_at           DateTime?          @db.Timestamptz(6)
  template_id       String?            @db.Uuid
  parent_message_id String?            @db.Uuid
  thread_id         String?            @db.Uuid
  is_ai_generated   Boolean?           @default(false)
  ai_confidence     Decimal?           @db.Decimal(3, 2)
  created_at        DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?          @default(now()) @db.Timestamptz(6)
  conversations     conversations?     @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  messages          messages?          @relation("messagesTomessages", fields: [parent_message_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_messages    messages[]         @relation("messagesTomessages")
  users             users              @relation(fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  message_templates message_templates? @relation(fields: [template_id], references: [id], onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model notification_templates {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @db.VarChar(100)
  type       String    @db.VarChar(50)
  subject    String?   @db.VarChar(255)
  content    String
  variables  Json?     @default("[]")
  is_active  Boolean   @default(true)
  created_by String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model notifications {
  id              Int       @id @default(autoincrement())
  type            String    @db.VarChar(50)
  category        String    @db.VarChar(50)
  priority        String?   @default("medium") @db.VarChar(20)
  status          String?   @default("unread") @db.VarChar(20)
  title           String    @db.VarChar(255)
  message         String
  action_required Boolean?  @default(false)
  details         Json?
  actions         Json?
  user_id         String?   @db.Uuid
  related_id      String?   @db.VarChar(100)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)
}

model password_reset_tokens {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  token_hash String    @unique @db.VarChar(255)
  expires_at DateTime  @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  is_used    Boolean?  @default(false)
  used_at    DateTime? @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model payments {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice_id     String    @db.Uuid
  agency_id      String    @db.Uuid
  amount         Decimal   @db.Decimal(10, 2)
  currency       String    @default("USD") @db.VarChar(3)
  payment_method String    @db.VarChar(50)
  transaction_id String?   @db.VarChar(255)
  status         String    @default("pending") @db.VarChar(50)
  processed_at   DateTime? @db.Timestamp(6)
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  agencies       agencies  @relation(fields: [agency_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  invoices       invoices  @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([invoice_id], map: "idx_payments_invoice_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model platform_analytics {
  id                      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  total_agencies          Int       @default(0)
  active_units            Int       @default(0)
  vacant_units            Int       @default(0)
  total_properties        Int       @default(0)
  independent_landlords   Int       @default(0)
  active_tenants          Int       @default(0)
  tenants_in_default      Int       @default(0)
  monthly_revenue         Decimal   @default(0) @db.Decimal(15, 2)
  ytd_revenue             Decimal   @default(0) @db.Decimal(15, 2)
  occupancy_rate          Decimal   @default(0) @db.Decimal(5, 2)
  lease_renewal_rate      Decimal   @default(0) @db.Decimal(5, 2)
  new_maintenance_tickets Int       @default(0)
  new_complaint_tickets   Int       @default(0)
  created_at              DateTime? @default(now()) @db.Timestamp(6)

  @@index([created_at], map: "idx_platform_analytics_created_at")
}

model properties {
  id                                 String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                               String                @db.VarChar(255)
  type                               property_type
  description                        String?
  street                             String                @db.VarChar(255)
  city                               String                @db.VarChar(100)
  region                             String                @db.VarChar(100)
  country                            String                @default("Kenya") @db.VarChar(100)
  postal_code                        String?               @db.VarChar(20)
  latitude                           Decimal?              @db.Decimal(10, 8)
  longitude                          Decimal?              @db.Decimal(11, 8)
  ownership_type                     ownership_type        @default(individual)
  owner_id                           String                @db.Uuid
  agency_id                          String?               @db.Uuid
  number_of_units                    Int                   @default(1)
  number_of_blocks                   Int?
  number_of_floors                   Int?
  service_charge_rate                Decimal?              @db.Decimal(10, 2)
  service_charge_type                String?               @db.VarChar(20)
  amenities                          Json?                 @default("[]")
  access_control                     String?               @db.VarChar(100)
  maintenance_schedule               String?               @db.VarChar(100)
  status                             property_status       @default(active)
  year_built                         Int?
  last_renovation                    DateTime?             @db.Timestamptz(6)
  documents                          Json?                 @default("[]")
  images                             Json?                 @default("[]")
  created_by                         String                @db.Uuid
  created_at                         DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at                         DateTime?             @default(now()) @db.Timestamptz(6)
  company_id                         String?               @db.Uuid
  conversations                      conversations[]
  leases                             leases[]
  companies                          companies?            @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_properties_company")
  agencies                           agencies?             @relation(fields: [agency_id], references: [id], onUpdate: NoAction)
  users_properties_created_byTousers users                 @relation("properties_created_byTousers", fields: [created_by], references: [id], onUpdate: NoAction)
  users_properties_owner_idTousers   users                 @relation("properties_owner_idTousers", fields: [owner_id], references: [id], onUpdate: NoAction)
  property_caretakers                property_caretakers[]
  units                              units[]

  @@index([city], map: "idx_properties_city")
  @@index([company_id], map: "idx_properties_company_id")
  @@index([owner_id], map: "idx_properties_owner_id")
  @@index([status], map: "idx_properties_status")
  @@index([type], map: "idx_properties_type")
}

model property_caretakers {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  property_id  String?     @db.Uuid
  caretaker_id String?     @db.Uuid
  assigned_at  DateTime?   @default(now()) @db.Timestamptz(6)
  is_primary   Boolean?    @default(false)
  caretakers   caretakers? @relation(fields: [caretaker_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  properties   properties? @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([property_id, caretaker_id])
}

model refresh_tokens {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String    @db.Uuid
  token_hash  String    @unique @db.VarChar(255)
  device_info Json?
  ip_address  String?   @db.Inet
  user_agent  String?
  expires_at  DateTime  @db.Timestamp(6)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  is_revoked  Boolean?  @default(false)
  revoked_at  DateTime? @db.Timestamp(6)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([token_hash], map: "idx_refresh_tokens_token_hash")
  @@index([user_id], map: "idx_refresh_tokens_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model report_templates {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String              @db.VarChar(100)
  description       String?
  type              String              @db.VarChar(50)
  query             String
  parameters        Json?               @default("[]")
  is_active         Boolean             @default(true)
  created_by        String              @db.Uuid
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @default(now()) @db.Timestamp(6)
  users             users               @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  scheduled_reports scheduled_reports[]

  @@index([type], map: "idx_report_templates_type")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model scheduled_reports {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  template_id      String           @db.Uuid
  name             String           @db.VarChar(100)
  recipients       Json             @default("[]")
  schedule         String           @db.VarChar(100)
  format           String           @default("pdf") @db.VarChar(20)
  parameters       Json?
  is_active        Boolean          @default(true)
  last_run_at      DateTime?        @db.Timestamp(6)
  next_run_at      DateTime?        @db.Timestamp(6)
  created_by       String           @db.Uuid
  created_at       DateTime?        @default(now()) @db.Timestamp(6)
  updated_at       DateTime?        @default(now()) @db.Timestamp(6)
  users            users            @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  report_templates report_templates @relation(fields: [template_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([next_run_at], map: "idx_scheduled_reports_next_run_at")
  @@index([template_id], map: "idx_scheduled_reports_template_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model subscription_plans {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String          @db.VarChar(100)
  type           String          @db.VarChar(50)
  monthly_price  Decimal         @db.Decimal(10, 2)
  yearly_price   Decimal         @db.Decimal(10, 2)
  features       Json            @default("[]")
  max_properties Int?
  max_units      Int?
  max_users      Int?
  sms_credits    Int             @default(0)
  is_active      Boolean         @default(true)
  created_at     DateTime?       @default(now()) @db.Timestamp(6)
  updated_at     DateTime?       @default(now()) @db.Timestamp(6)
  subscriptions  subscriptions[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model subscriptions {
  id                 String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  agency_id          String             @db.Uuid
  plan_id            String             @db.Uuid
  status             String             @default("active") @db.VarChar(50)
  billing_cycle      String             @db.VarChar(20)
  start_date         DateTime           @db.Date
  end_date           DateTime?          @db.Date
  next_billing_date  DateTime           @db.Date
  amount             Decimal            @db.Decimal(10, 2)
  discount_amount    Decimal?           @default(0) @db.Decimal(10, 2)
  trial_ends_at      DateTime?          @db.Timestamp(6)
  cancelled_at       DateTime?          @db.Timestamp(6)
  created_at         DateTime?          @default(now()) @db.Timestamp(6)
  updated_at         DateTime?          @default(now()) @db.Timestamp(6)
  invoices           invoices[]
  agencies           agencies           @relation(fields: [agency_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  subscription_plans subscription_plans @relation(fields: [plan_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([agency_id], map: "idx_subscriptions_agency_id")
  @@index([status], map: "idx_subscriptions_status")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model system_settings {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key         String    @unique @db.VarChar(100)
  value       String
  data_type   String    @default("string") @db.VarChar(20)
  category    String    @db.VarChar(50)
  description String?
  is_public   Boolean   @default(false)
  updated_by  String    @db.Uuid
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  users       users     @relation(fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([category], map: "idx_system_settings_category")
}

model tenant_migrations {
  id            String    @id @db.VarChar(50)
  tenant_id     String    @db.Uuid
  old_unit_id   String?   @db.Uuid
  new_unit_id   String    @db.Uuid
  move_in_date  DateTime? @db.Date
  move_out_date DateTime? @db.Date
  notes         String?
  migrated_at   DateTime? @default(now()) @db.Timestamptz(6)
}

model tenant_profiles {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String    @unique @db.Uuid
  id_number         String?   @db.VarChar(50)
  nationality       String?   @default("Kenyan") @db.VarChar(100)
  move_in_date      DateTime? @db.Date
  lease_type        String?   @default("fixed_term") @db.VarChar(50)
  lease_start_date  DateTime? @db.Date
  lease_end_date    DateTime? @db.Date
  rent_amount       Decimal?  @db.Decimal(10, 2)
  deposit_amount    Decimal?  @db.Decimal(10, 2)
  payment_frequency String?   @default("monthly") @db.VarChar(20)
  payment_day       Int?      @default(1)
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @db.Timestamptz(6)
  users             users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model units {
  id                                   String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  property_id                          String               @db.Uuid
  unit_number                          String               @db.VarChar(50)
  unit_type                            unit_type
  block_number                         String?              @db.VarChar(20)
  floor_number                         Int?
  size_square_feet                     Decimal?             @db.Decimal(10, 2)
  size_square_meters                   Decimal?             @db.Decimal(10, 2)
  number_of_bedrooms                   Int?
  number_of_bathrooms                  Int?
  has_ensuite                          Boolean?             @default(false)
  has_balcony                          Boolean?             @default(false)
  has_parking                          Boolean?             @default(false)
  parking_spaces                       Int?                 @default(0)
  rent_amount                          Decimal              @db.Decimal(12, 2)
  currency                             String               @default("KES") @db.VarChar(3)
  deposit_amount                       Decimal              @db.Decimal(12, 2)
  deposit_months                       Int                  @default(1)
  status                               unit_status          @default(vacant)
  condition                            unit_condition       @default(good)
  furnishing_type                      furnishing_type      @default(unfurnished)
  water_meter_number                   String?              @db.VarChar(50)
  electric_meter_number                String?              @db.VarChar(50)
  utility_billing_type                 utility_billing_type @default(postpaid)
  in_unit_amenities                    Json?                @default("[]")
  appliances                           Json?                @default("[]")
  current_tenant_id                    String?              @db.Uuid
  lease_start_date                     DateTime?            @db.Date
  lease_end_date                       DateTime?            @db.Date
  lease_type                           String?              @db.VarChar(20)
  documents                            Json?                @default("[]")
  images                               Json?                @default("[]")
  estimated_value                      Decimal?             @db.Decimal(15, 2)
  market_rent_estimate                 Decimal?             @db.Decimal(12, 2)
  last_valuation_date                  DateTime?            @db.Date
  created_by                           String               @db.Uuid
  created_at                           DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at                           DateTime?            @default(now()) @db.Timestamptz(6)
  company_id                           String?              @db.Uuid
  conversations                        conversations[]
  leases                               leases[]
  companies                            companies?           @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_units_company")
  users_units_created_byTousers        users                @relation("units_created_byTousers", fields: [created_by], references: [id], onUpdate: NoAction)
  users_units_current_tenant_idTousers users?               @relation("units_current_tenant_idTousers", fields: [current_tenant_id], references: [id], onUpdate: NoAction)
  properties                           properties           @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([property_id, unit_number])
  @@index([company_id], map: "idx_units_company_id")
  @@index([current_tenant_id], map: "idx_units_current_tenant_id")
  @@index([property_id], map: "idx_units_property_id")
  @@index([status], map: "idx_units_status")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                                        String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                     String?                     @unique @db.VarChar(255)
  phone_number                              String?                     @db.VarChar(20)
  password_hash                             String?                     @db.VarChar(255)
  first_name                                String                      @db.VarChar(100)
  last_name                                 String                      @db.VarChar(100)
  role                                      String                      @db.VarChar(50)
  status                                    String                      @default("pending") @db.VarChar(20)
  agency_id                                 String?                     @db.Uuid
  landlord_id                               String?                     @db.Uuid
  created_by                                String?                     @db.Uuid
  email_verified                            Boolean?                    @default(false)
  phone_verified                            Boolean?                    @default(false)
  last_login_at                             DateTime?                   @db.Timestamp(6)
  password_changed_at                       DateTime?                   @default(now()) @db.Timestamp(6)
  failed_login_attempts                     Int?                        @default(0)
  account_locked_until                      DateTime?                   @db.Timestamp(6)
  created_at                                DateTime?                   @default(now()) @db.Timestamp(6)
  updated_at                                DateTime?                   @default(now()) @db.Timestamp(6)
  invitation_status                         String?                     @default("pending") @db.VarChar(20)
  invitation_sent_at                        DateTime?                   @db.Timestamptz(6)
  invitation_accepted_at                    DateTime?                   @db.Timestamptz(6)
  invitation_token                          String?                     @db.VarChar(255)
  company_id                                String?                     @db.Uuid
  agencies_agencies_created_byTousers       agencies[]                  @relation("agencies_created_byTousers")
  agency_applications                       agency_applications[]
  api_keys                                  api_keys[]
  audit_logs                                audit_logs[]
  broadcast_messages                        broadcast_messages[]
  caretakers                                caretakers[]
  conversations                             conversations[]
  email_verification_tokens                 email_verification_tokens[]
  emergency_contacts                        emergency_contacts?
  invitations_invitations_created_byTousers invitations[]               @relation("invitations_created_byTousers")
  invitations_invitations_user_idTousers    invitations[]               @relation("invitations_user_idTousers")
  lease_templates                           lease_templates[]
  leases_leases_landlord_idTousers          leases[]                    @relation("leases_landlord_idTousers")
  leases_leases_tenant_idTousers            leases[]                    @relation("leases_tenant_idTousers")
  message_templates                         message_templates[]
  messages                                  messages[]
  notification_templates                    notification_templates[]
  password_reset_tokens                     password_reset_tokens[]
  properties_properties_created_byTousers   properties[]                @relation("properties_created_byTousers")
  properties_properties_owner_idTousers     properties[]                @relation("properties_owner_idTousers")
  refresh_tokens                            refresh_tokens[]
  report_templates                          report_templates[]
  scheduled_reports                         scheduled_reports[]
  system_settings                           system_settings[]
  tenant_profiles                           tenant_profiles?
  units_units_created_byTousers             units[]                     @relation("units_created_byTousers")
  units_units_current_tenant_idTousers      units[]                     @relation("units_current_tenant_idTousers")
  agencies_users_agency_idToagencies        agencies?                   @relation("users_agency_idToagencies", fields: [agency_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_agency")
  companies                                 companies?                  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_users_company")
  users_users_created_byTousers             users?                      @relation("users_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_created_by")
  other_users_users_created_byTousers       users[]                     @relation("users_created_byTousers")
  users_users_landlord_idTousers            users?                      @relation("users_landlord_idTousers", fields: [landlord_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_landlord")
  other_users_users_landlord_idTousers      users[]                     @relation("users_landlord_idTousers")
  websocket_connections                     websocket_connections[]

  @@index([agency_id], map: "idx_users_agency_id")
  @@index([company_id], map: "idx_users_company_id")
  @@index([email], map: "idx_users_email")
  @@index([invitation_status], map: "idx_users_invitation_status")
  @@index([invitation_token], map: "idx_users_invitation_token")
  @@index([phone_number], map: "idx_users_phone")
  @@index([role], map: "idx_users_role")
  @@index([role, company_id], map: "idx_users_role_company_id")
  @@index([status], map: "idx_users_status")
}

model websocket_connections {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String    @db.Uuid
  connection_id String    @unique @db.VarChar(255)
  room          String?   @db.VarChar(100)
  user_agent    String?
  ip_address    String?   @db.Inet
  status        String?   @default("connected") @db.VarChar(20)
  last_seen     DateTime? @default(now()) @db.Timestamptz(6)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum furnishing_type {
  furnished
  unfurnished
  semi_furnished
}

enum invitation_status {
  invited
  setup_completed
  expired
  cancelled
}

enum lease_status {
  draft
  active
  pending
  expired
  terminated
  renewed
}

enum lease_type {
  fixed
  monthly
  yearly
  commercial
}

enum ownership_type {
  individual
  company
  joint
}

enum property_status {
  active
  under_construction
  renovation
  inactive
}

enum property_type {
  residential
  commercial
  industrial
  mixed_use
  institutional
  vacant_land
  hospitality
  recreational
}

enum unit_condition {
  new
  excellent
  good
  fair
  poor
  needs_repairs
  renovated
}

enum unit_status {
  vacant
  occupied
  reserved
  under_repair
  maintenance
}

enum unit_type {
  single_room
  double_room
  bedsitter
  studio
  one_bedroom      @map("1_bedroom")
  two_bedroom      @map("2_bedroom")
  three_bedroom    @map("3_bedroom")
  four_bedroom     @map("4_bedroom")
  five_plus_bedroom @map("5_plus_bedroom")
  servant_quarter
  maisonette
  penthouse
  office_space
  retail_shop
  kiosk
  stall
  warehouse
  restaurant_space
  studio_office
  coworking_unit
  medical_suite
}

enum utility_billing_type {
  prepaid
  postpaid
  inclusive
}
